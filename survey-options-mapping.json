{
  "mapping_metadata": {
    "description": "Maps full option text from survey to shortened display text",
    "purpose": "For use in visualizations, tables, and compact displays"
  },
  "question_mappings": {
    "procedural_tools_experience": {
      "items": {
        "Plugins/Tools that use Wave Function Collapse": "WFC plugins/tools",
        "Plugins/Tools that use other methods": "Other method plugins/tools",
        "Custom code-based PCG solutions": "Custom code-based PCG"
      }
    },
    "current_pcg_usage": {
      "I don't currently use procedural generation": "I don't currently use PCG",
      "World building (terrain, vegetation, etc.)": "World building",
      "Level layout/structure generation": "Level layout/structure"
    },
    "level_generation_frequency": {
      "Always (essential part of workflow)": "Always",
      "Often (most projects)": "Often",
      "Sometimes (about half of projects)": "Sometimes",
      "Rarely (a few projects)": "Rarely"
    },
    "primary_concerns": {
      "Lack of precise artistic control": "Lack of artistic control",
      "Technical complexity/steep learning curve": "Technical complexity",
      "Difficulty in debugging unexpected outputs": "Debugging difficulty",
      "Integration with existing workflows": "Workflow integration",
      "Time investment to set up compared to potential benefits": "Time investment vs. benefits",
      "Unpredictable results affecting game balance": "Unpredictable results",
      "Unclear design methodology for procedural systems": "Unclear design methodology"
    },
    "tool_view": {
      "I'm satisfied with the current PCG tools available": "Satisfied with current tools",
      "Existing PCG tools are too limited in what they can generate": "Tools too limited",
      "I prefer handcrafting levels and don't see benefits in PCG tools": "Prefer handcrafting",
      "Most PCG tools are built for programmers, not designers": "Tools built for programmers",
      "PCG tools don't give me enough control over the final output": "Insufficient control",
      "PCG tools are too complex to integrate into my workflow": "Too complex to integrate"
    },
    "critical_factors": {
      "Flexibility (ability to adapt to various use cases)": "Flexibility",
      "Familiarity (resemblance to tools you already know)": "Familiarity",
      "Simplicity (low barrier to entry)": "Simplicity",
      "Reliability (predictable, stable results)": "Reliability",
      "Feature completeness (comprehensive capabilities)": "Feature completeness",
      "Documentation and learning resources": "Documentation"
    },
    "node_tool_features": {
      "Visual previews of generation steps": "Visual previews",
      "Easy debugging of unexpected results": "Easy debugging",
      "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)": "Pre-built patterns",
      "Ability to mix procedural and hand-crafted content": "Mix procedural/handcrafted",
      "Control over generation constraints and rules": "Control over constraints",
      "Limited or no programming required": "Limited programming"
    },
    "preferred_approach": {
      "Building generators from programming primitives (maximum flexibility)": "Programming primitives",
      "Assembling generators from pre-built, configurable components (balanced approach)": "Pre-built components",
      "Using templates with limited parameters to adjust (simpler, less flexible)": "Templates with parameters",
      "Mixed-initiative approach where the tool learns from my examples": "Mixed-initiative learning",
      "Assembling generators from pre-built components, with the option to write custom components": "Pre-built + custom components"
    },
    "integration_preference": {
      "Deep integration within existing engine (like Unreal Blueprint)": "Deep engine integration",
      "Plugin that works across multiple engines": "Cross-engine plugin",
      "Standalone application that exports to game engines": "Standalone application",
      "Web-based tool accessible from anywhere": "Web-based tool"
    },
    "genre_interest": {
      "items": {
        "Roguelikes / Roguelites": "Roguelikes/Roguelites"
      }
    },
    "level_representation": {
      "Rectangular grid/tile-based": "Rectangular grid",
      "Hexagonal grid/tile-based": "Hexagonal grid",
      "Scene graph/hierarchical structure": "Scene graph",
      "Graph-based (nodes and connections)": "Graph-based",
      "Node-based graphs (mission/flow graphs)": "Node-based graphs",
      "Constraint-based representations (is this a known term)": "Constraint-based"
    },
    "most_useful_approach": {
      "Mission-driven generation (gameplay goals determine level structure)": "Mission-driven",
      "Space-driven generation (spatial layout determines gameplay possibilities)": "Space-driven",
      "Balanced approach (iterative refinement between mission and space)": "Balanced approach",
      "Context-dependent (different approaches for different game sections)": "Context-dependent",
      "Not sure/would need to experiment": "Not sure"
    },
    "ai_role_preference": {
      "Assistant-based (AI helps implement your design intentions)": "Assistant-based",
      "Suggestion-based (AI proposes level designs for you to select and modify)": "Suggestion-based",
      "Learning-based (AI learns from your design patterns and mimics your style)": "Learning-based",
      "Analysis-based (AI analyzes and provides feedback on generated levels)": "Analysis-based",
      "I prefer traditional rule-based PCG without AI involvement": "Prefer rule-based",
      "Tool-based (AI enhances specific components of your manual design process)": "Tool-based",
      "Full automation (AI generates complete levels with minimal input)": "Full automation",
      "I have no opinion/not sure": "No opinion"
    },
    "ai_importance_factors": {
      "Maintaining creative control over the final output": "Creative control",
      "Understanding how the AI makes its decisions": "Understanding AI decisions",
      "Speed of generation compared to traditional methods": "Speed",
      "Novelty/uniqueness of the generated content": "Novelty",
      "Consistency with existing game assets and style": "Consistency",
      "Learning from my design preferences over time": "Learning preferences"
    },
    "ai_concerns": {
      "Unpredictable or inconsistent results": "Unpredictable results",
      "Lack of control over the generation process": "Lack of control",
      "Difficulty integrating with existing tools/workflows": "Integration difficulty",
      "Potential copyright/IP issues with AI-generated content": "Copyright/IP issues",
      "Performance and computational requirements": "Performance requirements",
      "Lack of specialized AI tools for level design specifically": "Lack of specialized tools",
      "Intellectual property/ownership concerns": "IP/ownership",
      "Potential black box nature (lack of transparency)": "Black box nature",
      "Loss of designer agency/control": "Loss of agency"
    },
    "desired_solutions": {
      "Time savings compared to manual design": "Time savings",
      "Ability to create more content variations with consistent quality": "Content variations",
      "Improved iteration speed on level designs": "Iteration speed",
      "Reduced technical barriers to procedural generation": "Reduced technical barriers",
      "Better integration with existing workflows": "Workflow integration",
      "Community/marketplace of shareable generator components": "Component marketplace",
      "Learning resources and examples for different game genres": "Learning resources"
    }
  }
}