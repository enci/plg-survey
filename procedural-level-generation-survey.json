[
    {
        "id": "2",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Extensive Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Puzzle generation",
            "Enemy/NPC placement",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Familiarity (resemblance to tools you already know)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "3",
        "professional_role": "Technical Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": null,
        "node_tool_features": [
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": null,
        "preferred_approach": null,
        "integration_preference": null,
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": null,
        "ai_role_preference": null,
        "ai_importance_factors": null,
        "ai_concerns": null,
        "desired_solutions": null,
        "most_important_problem": null
    },
    {
        "id": "4",
        "professional_role": "Environment Artist",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Texture generation, foliage generation with L-Systems."
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unclear design methodology for procedural systems",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Familiarity (resemblance to tools you already know)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Navigation mesh"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "It always look very repeated."
    },
    {
        "id": "5",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "I prefer handcrafting levels and don't see benefits in PCG tools",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Rectangular grid/tile-based",
            "Voxel-based"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "Time saving"
    },
    {
        "id": "6",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Voxel-based",
            "Navigation mesh",
            "Hexagonal grid/tile-based"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Large scale level production speed"
    },
    {
        "id": "7",
        "professional_role": "Environment Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": null
    },
    {
        "id": "8",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Extensive Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Lack of precise artistic control",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Hexagonal grid/tile-based",
            "Scene graph/hierarchical structure",
            "Free-form geometry"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Solve the medial tasks and maximize time spent on creative work"
    },
    {
        "id": "10",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Enemy/NPC placement",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Community support"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Limited or no programming required",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Node-based graphs (mission/flow graphs)",
            "Free-form geometry"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Potential black box nature (lack of transparency)"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Community/marketplace of shareable generator components"
        ],
        "most_important_problem": "Reduce time and resources spent in Content Creation as a small Indie Dev"
    },
    {
        "id": "11",
        "professional_role": "Technical Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Lack of precise artistic control"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Rectangular grid/tile-based",
            "Navigation mesh"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Better integration with existing workflows",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Iteration times"
    },
    {
        "id": "13",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unity",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Integration with existing workflows",
            "Reliability (predictable, stable results)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Node-based graphs (mission/flow graphs)",
            "Scene graph/hierarchical structure",
            "Rectangular grid/tile-based",
            "Constraint-based representations (is this a known term)"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Platform and Environment Agnosticism"
    },
    {
        "id": "14",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Lack of precise artistic control"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Hexagonal grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design"
        ],
        "most_important_problem": null
    },
    {
        "id": "15",
        "professional_role": "Technical Artist",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unpredictable results affecting game balance",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "time and iteration"
    },
    {
        "id": "16",
        "professional_role": "Game Design Student",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Unpredictable results affecting game balance",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Limited or no programming required",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Hexagonal grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Time"
    },
    {
        "id": "17",
        "professional_role": "Technical Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Extensive Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Voxel-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Help speed up the design of large worlds."
    },
    {
        "id": "18",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Enemy/NPC placement",
            "Level layout/structure generation",
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": null,
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Web-based tool accessible from anywhere",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure",
            "Navigation mesh"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "democratize PCG"
    },
    {
        "id": "19",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Expressiveness and variety"
        ],
        "tool_view": "Well, I'm making my own PCG tools, but interested in others' too",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "No stored levels",
            "all generated at runtime (including level parameters)"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Community/marketplace of shareable generator components",
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": null
    },
    {
        "id": "20",
        "professional_role": "Game Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Feature completeness (comprehensive capabilities)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Hexagonal grid/tile-based",
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": null,
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "21",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Limited or no programming required",
            "Support for mission/gameplay integration",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based",
            "Free-form geometry",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Parameterisation of structure for exploration of variation space"
    },
    {
        "id": "22",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Integration with existing workflows"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Less grinding for artists, keep artists in the flow, more time to focus on actual creativity"
    },
    {
        "id": "23",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Unity",
            "Godot",
            "GameMaker"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement",
            "Puzzle generation",
            "Materials through Substance Designer"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Houdini - too complex/built for programmers.  UE PCG - built the same way but with less features.   I use Apparance partly for the designer-friendly approach, but it's not well known enough yet.",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "I like to see a tool with regular updates of exciting new features from the devs, like Blender's GNs have, or something like Voxel Plugin which regularly has big breaking change updates.  I worry more about the lack of progress on something like UE's PCGs as a red flag of future development."
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Scene graph/hierarchical structure",
            "Voxel-based",
            "Hexagonal grid/tile-based",
            "Rectangular grid/tile-based",
            "Node-based graphs (mission/flow graphs)",
            "For bigger things, typically any kind of accelerated hierarchical structure, like Quadtree/Octree (gridded) but within that is freeform."
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Time savings note: the important part for me is scaling - the exponential savings made when applied to huge worlds etc for a bigger upfront cost of procgen development over handcrafted levels.   Secondly and not mentioned above, runtime space savings: my favourite technical advantage pcg (with Apparance) has given us on projects is the ability to serve clients with compressed PCG instructions for modular placements at 100s of kilobytes, instead of 100s of gb of pre-baked offline PCG assets",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Mentioned above, the time-saving of exponentially larger games.  I might use it as a novelty for smaller projects, but for something with eg big cities or just anything with a smaller team, there is no alternative."
    },
    {
        "id": "25",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Custom in-house engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "As a programmer I'd normally implement PCG in code, not using an external tool",
        "critical_factors": [
            "Integration with existing workflows",
            "Community support",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built components, with the option to write custom components",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Community/marketplace of shareable generator components",
            "Reduced technical barriers to procedural generation",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "Having to hardcode your PLG, which will be much less flexible to change. Also, when it is coded designers won't be able to play with it as easily. Having an external tool that exports (customizable) level data would be great. Especially if designers are able to work with it more easily."
    },
    {
        "id": "26",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "Puzzle generation",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "All levels ending up being more of the same"
        ],
        "tool_view": "Not many pcg tools available for godot and making one usually takes too much time for the extent of the project",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Integration with existing workflows",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Having to disclose that my game uses AI on platforms like Steam where it has impact on game\u2019s reception"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Being able to have more content in my game"
    },
    {
        "id": "27",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools are neat, but most often not as accessible to the general public and indies.",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Best case would be pre-built, configurable components, but with the ability to easily create new and custom components",
        "integration_preference": "Web-based tool accessible from anywhere",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Community/marketplace of shareable generator components",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": null
    },
    {
        "id": "28",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Integration with existing workflows",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Limited or no programming required",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Navigation mesh",
            "Node-based graphs (mission/flow graphs)",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "Assist with level design and generation with linking story and quest content with environment"
    },
    {
        "id": "29",
        "professional_role": "Academic/Researcher",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "City models"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "I do not use procedural generation for levels. I do not do games"
        ],
        "tool_view": "I do not do games",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Free-form geometry"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "Do quick defaults&templates to be edited later, but not in a game context *I do computational urban design"
    },
    {
        "id": "30",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine",
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure",
            "Voxel-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "31",
        "professional_role": "Technical Artist",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": null,
        "integration_preference": null,
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": null,
        "ai_role_preference": null,
        "ai_importance_factors": null,
        "ai_concerns": null,
        "desired_solutions": null,
        "most_important_problem": null
    },
    {
        "id": "32",
        "professional_role": "Academic/Researcher",
        "years_experience": "6-10 years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Mission/quest generation",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Limited or no programming required",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Using templates with limited parameters to adjust (simpler, less flexible)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Node-based graphs (mission/flow graphs)",
            "Constraint-based representations (is this a known term)"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Reduced technical barriers to procedural generation",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "33",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Lack of precise artistic control"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "34",
        "professional_role": "Level Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits",
            "Lack of precise artistic control"
        ],
        "tool_view": "I prefer handcrafting levels and don't see benefits in PCG tools",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Populating a world with content (quests, encounters, side activities etc.)"
    },
    {
        "id": "35",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Hexagonal grid/tile-based",
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I have no opinion/not sure",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "If I need a diverse and rich world"
    },
    {
        "id": "36",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG for common elements can allow more time for handcrafting gameplay",
        "critical_factors": [
            "Quick iteration times",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Creating more content of the same quality in the same time as handcrafted"
    },
    {
        "id": "37",
        "professional_role": "Level Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unity",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation",
            "If i did use it, it would be for structure generation and world building"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unclear design methodology for procedural systems",
            "Time investment to set up compared to potential benefits",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "I dont know enough about them to know where to begin",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Navigation mesh"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": null
    },
    {
        "id": "38",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance",
            "Unpredictable results affecting game accessibility and content rating (Mostly AI-based procedural generation)"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Familiarity (resemblance to tools you already know)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Constraint-based representations (is this a known term)"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Community/marketplace of shareable generator components"
        ],
        "most_important_problem": "It is very genre-dependent, but procedural live generation can help keep games balanced during gameplay. Essentially, in what I do, it'd be extremely helpful to have procedural generation support subtle rubber-banding"
    },
    {
        "id": "39",
        "professional_role": "Most of the above because indie :(",
        "years_experience": "0-2 years",
        "game_engines": [
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "I cannot answer",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "I design games where the level is consumed once. I would like the level generation to alter the existing and designed by hand level to introduce variability with playthrough/player excursion in the level"
    },
    {
        "id": "40",
        "professional_role": "Game Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": null,
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Limited or no programming required",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": null,
        "preferred_approach": null,
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Full automation (AI generates complete levels with minimal input)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": null
    },
    {
        "id": "41",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Time investment to set up compared to potential benefits",
            "Lack of precise artistic control"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based",
            "Node-based graphs (mission/flow graphs)",
            "Free-form geometry"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "42",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Accelerating my workflow"
    },
    {
        "id": "43",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Limited or no programming required",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Navigation mesh"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Learning resources and examples for different game genres",
            "Time savings compared to manual design",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Ease of integration to game engines"
    },
    {
        "id": "44",
        "professional_role": "Game Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Enemy/NPC placement",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Familiarity (resemblance to tools you already know)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Limited or no programming required",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Web-based tool accessible from anywhere",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Time savings compared to manual design",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": null
    },
    {
        "id": "45",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Godot",
            "GameMaker"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Puzzle generation",
            "Mission/quest generation",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Difficulty in debugging unexpected outputs",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Familiarity (resemblance to tools you already know)"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Any of the above works for me as long as the tool works",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Reduced technical barriers to procedural generation",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "time Saver : boiler code already done (don't want to implement known algorithms), fast, saves time for polish balancing etc"
    },
    {
        "id": "46",
        "professional_role": "Level Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Lack of precise artistic control",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "47",
        "professional_role": "Academic/Researcher",
        "years_experience": "10+ years",
        "game_engines": [
            "Godot",
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Extensive Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Mission/quest generation",
            "Enemy/NPC placement",
            "Puzzle generation",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Most PCG tools are bullshit",
        "critical_factors": [
            "Community support",
            "Documentation and learning resources",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Full automation (AI generates complete levels with minimal input)"
        ],
        "ai_importance_factors": [
            "Speed of generation compared to traditional methods",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Potential black box nature (lack of transparency)"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Creativity"
    },
    {
        "id": "48",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity",
            "Custom in-house engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Unclear design methodology for procedural systems",
            "Lack of precise artistic control"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Generating meaningful content which can engage users while maintaining an authored feel"
    },
    {
        "id": "50",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Unclear design methodology for procedural systems",
            "Lack of precise artistic control"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Node-based graphs (mission/flow graphs)",
            "Scene graph/hierarchical structure",
            "Free-form geometry"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Better integration with existing workflows"
        ],
        "most_important_problem": null
    },
    {
        "id": "52",
        "professional_role": "Academic/Researcher",
        "years_experience": "10+ years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Simplicity (low barrier to entry)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Web-based tool accessible from anywhere",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based",
            "Navigation mesh"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Learning resources and examples for different game genres",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "53",
        "professional_role": "Level Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "I do see the value of PCG tools, but as a level designer i only use them for set dressing because the level layout itself is superior if handcrafted",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Limited or no programming required",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Lack of specialized AI tools for level design specifically"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Timesaving for repetitive and time consuming tasks such as set dressing which unlocks more scope possibilities"
    },
    {
        "id": "54",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Documentation and learning resources",
            "Reliability (predictable, stable results)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "a library to embed into the game",
        "genre_interest": {},
        "level_representation": [
            "Hexagonal grid/tile-based",
            "Voxel-based"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": null,
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "paying for tokens every time player generates a map"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Ability to create more content variations with consistent quality",
            "level generation taking care of new content added to the game"
        ],
        "most_important_problem": "a new random map being generated for every play customised to specific settings"
    },
    {
        "id": "55",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unclear design methodology for procedural systems",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": null,
        "ai_concerns": null,
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Provide infinite levels that retain the 'essence' of what makes a level fun/interesting in the first place."
    },
    {
        "id": "56",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": null,
            "Unreal Engine PCG tools": null,
            "Blender Geometry Nodes": null,
            "Plugins/Tools that use Wave Function Collapse": null,
            "Plugins/Tools that use other methods": null,
            "Custom code-based PCG solutions": null
        },
        "current_pcg_usage": [
            "Enemy/NPC placement",
            "Mission/quest generation",
            "Level layout/structure generation",
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "People, Convincing other depts.",
            "Lack of precise artistic control"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "Make lots of unique fun levels"
    },
    {
        "id": "57",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Godot",
            "Unity",
            "Custom in-house engine",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Community/marketplace of shareable generator components",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "Reduce development cost ($) to create content."
    },
    {
        "id": "58",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Integration with existing workflows"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Community/marketplace of shareable generator components"
        ],
        "most_important_problem": null
    },
    {
        "id": "59",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Custom in-house engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Integration with existing workflows",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Better integration with existing workflows"
        ],
        "most_important_problem": null
    },
    {
        "id": "60",
        "professional_role": "Technical Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Integration with existing workflows",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Integration to houdini which connects to engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Point cloud"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Full automation (AI generates complete levels with minimal input)",
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Avoid manually placed objects"
    },
    {
        "id": "61",
        "professional_role": "Academic/Researcher",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Enemy/NPC placement",
            "Puzzle generation",
            "Mission/quest generation",
            "Textures/camouflage"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits",
            "Integration with existing workflows"
        ],
        "tool_view": "I prefer handcrafting levels and don't see benefits in PCG tools",
        "critical_factors": [
            "Documentation and learning resources",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Reduced technical barriers to procedural generation",
            "increased monetization"
        ],
        "most_important_problem": null
    },
    {
        "id": "62",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unpredictable results affecting game balance",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Integration with existing workflows",
            "Familiarity (resemblance to tools you already know)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Learning from my design preferences over time",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Community/marketplace of shareable generator components",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Consistent asset quality that makes sense in the rest of the artistic context"
    },
    {
        "id": "63",
        "professional_role": "Level Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Free-form geometry",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Speed of generation compared to traditional methods",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Difficulty integrating with existing tools/workflows",
            "Lack of specialized AI tools for level design specifically"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": null
    },
    {
        "id": "64",
        "professional_role": "Level Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I am not too familiar with PCG tools honestly, all procedural generation I do, im coding myself and Chatgpt together",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Familiarity (resemblance to tools you already know)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "In my last project, as progression is made in one direction, I always have the exit of a room in the middle, and the info I store is the distance between begginign and end to then spawn connections. But shape around entry and exit is free"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "More freedom in the level sections, so I could set the exit and have more organic results with the tool"
    },
    {
        "id": "66",
        "professional_role": "Character / General Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Unpredictable results affecting game balance",
            "Lack of precise artistic control"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Familiarity (resemblance to tools you already know)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Limited or no programming required",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Using templates with limited parameters to adjust (simpler, less flexible)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Reduced technical barriers to procedural generation",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "To save time, that way we can work on more assets to add additional variation."
    },
    {
        "id": "67",
        "professional_role": "Technical Artist",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Integration with existing workflows",
            "Creating variation"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Limited or no programming required",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Improved iteration speed on level designs",
            "Time savings compared to manual design"
        ],
        "most_important_problem": null
    },
    {
        "id": "68",
        "professional_role": "Game Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I prefer handcrafting levels and don't see benefits in PCG tools",
        "critical_factors": [
            "Documentation and learning resources",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Limited or no programming required",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "69",
        "professional_role": "Level Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "I prefer handcrafting levels and don't see benefits in PCG tools",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Integration with existing workflows",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Limited or no programming required",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Hexagonal grid/tile-based",
            "Rectangular grid/tile-based",
            "Navigation mesh",
            "Free-form geometry"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "To get some base or groundwork to start from, or ideate from"
    },
    {
        "id": "70",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Custom in-house engine",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Lack of precise artistic control",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I would like to learn how to use PCG tools for a personal project, but I have not started it yet due to lack of time.",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Learning resources and examples for different game genres",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "71",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Integration with existing workflows",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required",
            "Visual previews of generation steps"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Quickly adding variation to similar assets and easily populating a scene."
    },
    {
        "id": "9",
        "professional_role": "Technical Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Integration with existing workflows"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": null,
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Enabling creative control on a large scale"
    },
    {
        "id": "12",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Placement"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Things looking varied but the same. Spending more time making the tool than art-ing the thing."
        ],
        "tool_view": "With great power comes great responsibility",
        "critical_factors": [
            "Integration with existing workflows",
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": null,
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "JSON"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Sameness"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Speed from what I imagine to what's on the screen"
    },
    {
        "id": "24",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Rust & Bevy"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control"
        ],
        "tool_view": "I like to make my own tools, only way to truly understand what you are doing",
        "critical_factors": [
            "Integration with existing workflows",
            "Simplicity (low barrier to entry)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": null,
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Web-based tool accessible from anywhere",
        "genre_interest": {},
        "level_representation": [
            "Node-based graphs (mission/flow graphs)",
            "Graph tiles"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Difficulty integrating with existing tools/workflows",
            "Can't be packaged with the game (as of yet)."
        ],
        "desired_solutions": [
            "Proceduralism is not a tool to solve a problem IMHO. Its its own art form. Its a fun experience to give users control over the generation, and to let them experience the capabilities of your tools. The tools should be accessible in game at runtime",
            "Learning resources and examples for different game genres",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "I don't think we need more tools, we need more knowledge. I like what BorisTheBrave & Oskar Stalberg do: explaining generation techniques. I think the knowledge should be readily available, but folks should design their own systems aligned with their own projects."
    },
    {
        "id": "49",
        "professional_role": "Game Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": null,
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": null,
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": null,
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": null,
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": null,
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": null
    },
    {
        "id": "51",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Custom in-house engine",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": null,
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unpredictable results affecting game balance",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": null,
        "critical_factors": null,
        "node_tool_features": null,
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design",
            "Better integration with existing workflows"
        ],
        "most_important_problem": null
    },
    {
        "id": "65",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": null,
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Deterministic, Allow for iteration closer to shipping of the project."
        ],
        "most_important_problem": "Show processes of how solution made decisions per asset."
    },
    {
        "id": "72",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Custom in-house engine",
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Navigation mesh",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Better integration with existing workflows",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "73",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Integration with existing workflows",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "PCG in house are too custom, PCG in open engines are too loose-form, not goal-oriented enough and finicky.",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Limited or no programming required",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Not important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "If the pipeline to generate is clean and doesn't require 50clicks of import/exports or in-engine tool tickboxes, doesn't matter.",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Base its creation on existing level designs fed into it, to create variations or new layouts that speed up workflow whole remaining tonally consistent"
    },
    {
        "id": "74",
        "professional_role": "Game Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Support for mission/gameplay integration",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Navigation mesh"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "Creating a gameplay space I can build of off. A generated piece of level could be used as a sketch for a challenge in a level, this would speed up the process of prototyping challenges in-game."
    },
    {
        "id": "75",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Control over generation constraints and rules",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Learning resources and examples for different game genres",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Difficulty for artists to use"
    },
    {
        "id": "76",
        "professional_role": "Game Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Godot",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Integration with existing workflows",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "while pcg allows for a lot more content to be made, proc levels are often worse designed than hand made",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Scene graph/hierarchical structure",
            "Free-form geometry"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Learning resources and examples for different game genres",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "replayable content workload"
    },
    {
        "id": "77",
        "professional_role": "Game Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Hexagonal grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Potential black box nature (lack of transparency)"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Making engaging levels when I don't consider myself a good level designer"
    },
    {
        "id": "78",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Unclear design methodology for procedural systems",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Too often I need to reinvent the wheel for a new project because the PCG solution slightly differs from the previous project",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Easy debugging of unexpected results"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Hexagonal grid/tile-based",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "Skip the setup steps that I have to do in each project just because the project slightly differs from the previous (in terms of tech used, pipeline or design constraints)"
    },
    {
        "id": "79",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Take away the initial risk of dedicating time for setting up a PCG system."
    },
    {
        "id": "80",
        "professional_role": "Level Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Voxel-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Monotonous tasks."
    },
    {
        "id": "81",
        "professional_role": "Level Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "More rapid and flexible implementation of art assets"
    },
    {
        "id": "82",
        "professional_role": "Academic/Researcher",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "Decorative prop placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Time investment to set up compared to potential benefits",
            "Lack of connection to desired game flow and pacing (particularly in connection with narrative)"
        ],
        "tool_view": "The time saved isn't sufficient to match the effort expended to reach quality.",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Using templates with limited parameters to adjust (simpler, less flexible)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Navigation mesh"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Lack of connection to the intended game-wide player experience (escalating narrative arc, challenge, pacing of memorable set-piece events, etc.)"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Learning resources and examples for different game genres",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "High quality coverage of the basics (e.g. 'make a hospital ward') with easy customisation for me to build unique assets onto."
    },
    {
        "id": "83",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": null,
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": null,
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design"
        ],
        "most_important_problem": null
    },
    {
        "id": "84",
        "professional_role": "Game Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Godot",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": null
    },
    {
        "id": "85",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Unpredictable results affecting game balance",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Node-based graphs (mission/flow graphs)",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Better integration with existing workflows",
            "Learning resources and examples for different game genres",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "86",
        "professional_role": "Level Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Creation Kit",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "edge of world padding"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Time investment to set up compared to potential benefits",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "PCG Tools have their benefits but I often find them more time consuming to set-up and use than building something myself",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Visual previews of generation steps"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Voxel-based",
            "Free-form geometry",
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Large studios funding and supporting such tools then firing actual level designers in favour of using AI tools because they are cheaper than paying an employee"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "I want a PCG tool to help bridge the gap between the worlds and levels I imagine and my skill in bringing those worlds to life"
    },
    {
        "id": "87",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": null,
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Integration with existing workflows"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Documentation and learning resources",
            "Integration with existing workflows",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Free-form geometry"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Variation"
    },
    {
        "id": "88",
        "professional_role": "Technical Artist",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "World generation, set dressing, level design tools"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Lack of precise artistic control",
            "Hard to prove potential benefits to stake holders"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Easy debugging of unexpected results",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Flexibility and control over level creation during quick iteration"
    },
    {
        "id": "89",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Not important",
        "preferred_approach": "Using templates with limited parameters to adjust (simpler, less flexible)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "I have no opinion/not sure"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design",
            "Better integration with existing workflows"
        ],
        "most_important_problem": null
    },
    {
        "id": "90",
        "professional_role": "Game Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Godot",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "I don't currently use procedural generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Lack of precise artistic control",
            "No dirrect use in developed project"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Simplicity (low barrier to entry)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Limited or no programming required",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Visual previews of generation steps"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Using templates with limited parameters to adjust (simpler, less flexible)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Full automation (AI generates complete levels with minimal input)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Improved iteration speed on level designs",
            "Time savings compared to manual design"
        ],
        "most_important_problem": null
    },
    {
        "id": "91",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Custom in-house engine",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Integration with existing workflows",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Runtime vs. offline generation options",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Learning from my design preferences over time",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Learning resources and examples for different game genres",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "92",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unity",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based",
            "Voxel-based",
            "Constraint-based representations (is this a known term)"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Community/marketplace of shareable generator components",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": null
    },
    {
        "id": "93",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Integration with existing workflows",
            "Reliability (predictable, stable results)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration",
            "Visual previews of generation steps",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Better integration with existing workflows"
        ],
        "most_important_problem": null
    },
    {
        "id": "94",
        "professional_role": "Technical Artist",
        "years_experience": "0-2 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": null,
        "most_important_problem": null
    },
    {
        "id": "95",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "I don't have any concerns about the system - it's usually a lack of content that results in poor experiences."
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "New tools don't have to feel similar to existing ones, but they should feel intuitive, and let you accomplish what you want. Doesn't have to be simple, but logical and robuust.",
            "Reliability (predictable, stable results)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Free-form geometry",
            "Scene graph/hierarchical structure",
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Understanding how the AI makes its decisions"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Not just if what I am making with AI is really mine, but also: what is AI basing its suggestions on? Work of others? If so, that would be 100% reason not to use the tool."
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "I would once again like to mention that without enough content, generation falls flat."
        ],
        "most_important_problem": "Testing viability by running analytics. Combining elements into a level isn't what I'd use an of-the-shelf solution for. But something that could help test if a level is good, or at least works, that would be awesome."
    },
    {
        "id": "96",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity",
            "GameMaker",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "World building (terrain, vegetation, etc.)"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Integration with existing workflows",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Mixed-initiative approach where the tool learns from my examples",
        "integration_preference": "Core plugin that works across engines, with deep UI integrations for particular engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Voxel-based",
            "Constraint-based representations (is this a known term)",
            "Drawn zones (mix of free-form and constraints)"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "I have artistic vision, but not necessarily the artistic/practical skills to implement that vision. I do have extensive programming and some design skills. So I can build a game, but I will struggle to make it look eye-catching unless I simplify the art style a lot. I would love a proc-gen tool that can cleverly add detail and decorate a basic block-out (in e.g. a 3D first-person shooter) such that it looks like a fully fledged level. So input: basic (BSP) geometry, perhaps with some mark-up that indicates design/semantic intentions - output: level that is decorated with details such as slants, trims, pipes, walls with depth, bridges that start and end properly, other procedural geometry, etc. That way, I can stay in control over the overall design of the level, and have the artistic details be figured out by a tool, much like an art director making a request. That way, I do not need to be dependent on finding a (specific) artist to fully implement my vision, or at the very least I can get something very decent looking already, which also helps with inspiration and motivation."
    },
    {
        "id": "98",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Unpredictable results affecting game balance",
            "Difficulty in debugging unexpected outputs",
            "Lack of precise artistic control"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Integration with existing workflows",
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Reduce time on complex / boring stuff. Increase agency of level designer by suggesting content. Example: Create a world procedurally, create content more hand tailored."
    },
    {
        "id": "99",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Limited or no programming required",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Potential black box nature (lack of transparency)"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Better integration with existing workflows",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": null
    },
    {
        "id": "100",
        "professional_role": "Academic/Researcher",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits",
            "Lack of precise artistic control"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Integration with existing workflows",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Voxel-based",
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Creating a large foundation for artists to manually tweak and iterate with."
    },
    {
        "id": "101",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Godot",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Integration with existing workflows",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Better integration with existing workflows",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Quick iteration on the algorithms themselves"
    },
    {
        "id": "97",
        "professional_role": "Game Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unity"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Technical complexity/steep learning curve",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": null,
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Familiarity (resemblance to tools you already know)",
            "Documentation and learning resources"
        ],
        "node_tool_features": null,
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": null
    },
    {
        "id": "102",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Support for mission/gameplay integration",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": "Free-form geometry",
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Creating bigger worlds with less work (fewer people)."
    },
    {
        "id": "103",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Godot",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Integration with existing workflows"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Using templates with limited parameters to adjust (simpler, less flexible)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Navigation mesh",
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Full automation (AI generates complete levels with minimal input)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation"
        ],
        "most_important_problem": "Tool simplicity combined with output variation"
    },
    {
        "id": "104",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Integration with existing workflows",
            "Documentation and learning resources",
            "Familiarity (resemblance to tools you already know)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Voxel-based",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": "I have no opinion/not sure",
        "ai_importance_factors": "Understanding how the AI makes its decisions",
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "-"
    },
    {
        "id": "105",
        "professional_role": "Technical Artist",
        "years_experience": "10+ years",
        "game_engines": "Unity",
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": "World building (terrain, vegetation, etc.)",
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": "Rectangular grid/tile-based",
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Speed of generation compared to traditional methods",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Create high quality content"
    },
    {
        "id": "106",
        "professional_role": "Academic/Researcher",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Extensive Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "Mission/quest generation",
            "Enemy/NPC placement",
            "Level layout/structure generation",
            "World building (terrain, vegetation, etc.)",
            "Behavior Generation, Narrative"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Integration with existing workflows"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Documentation and learning resources",
            "Reliability (predictable, stable results)",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Node-based graphs (mission/flow graphs)",
            "Scene graph/hierarchical structure",
            "Rectangular grid/tile-based",
            "Constraint-based representations (is this a known term)",
            "Navigation mesh",
            "Free-form geometry",
            "Voxel-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Full automation (AI generates complete levels with minimal input)",
            "Suggestion-based (AI proposes level designs for you to select and modify)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Better integration with existing workflows",
            "Learning resources and examples for different game genres",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Generating runtime based geometry that can also be generated in editor."
    },
    {
        "id": "107",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": null
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG is powerful but new and growing.",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Node-based graphs (mission/flow graphs)",
            "Navigation mesh"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": "Maintaining creative control over the final output",
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "Making tools accessible to users unlocks massive UGC potential."
    },
    {
        "id": "108",
        "professional_role": "Game Designer",
        "years_experience": "6-10 years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": "I don't currently use procedural generation",
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Lack of precise artistic control"
        ],
        "tool_view": "My current role and activities require little to no PCG tool use though I am i terested in the subject",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Documentation and learning resources",
            "Readability/clarity. Things like proper tool tips and easy to understand nami g conventions."
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": "Rectangular grid/tile-based",
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Consistency with existing game assets and style"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Improved iteration speed on level designs",
            "Better integration with existing workflows"
        ],
        "most_important_problem": "Speed of iterations/testing with gameplay"
    },
    {
        "id": "109",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": "Custom in-house engine",
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits",
            "Technical complexity/steep learning curve"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Feature completeness (comprehensive capabilities)",
            "Performance",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Novelty/uniqueness of the generated content",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Better integration with existing workflows",
            "Community/marketplace of shareable generator components"
        ],
        "most_important_problem": "Make levels that fit well with the game."
    },
    {
        "id": "110",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Extensive Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Always (essential part of workflow)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Difficulty in debugging unexpected outputs",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Reliability (predictable, stable results)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": "I prefer traditional rule-based PCG without AI involvement",
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Potential black box nature (lack of transparency)"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Ability to create more content variations with consistent quality",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Rich detailed worlds"
    },
    {
        "id": "111",
        "professional_role": "Environment Artist",
        "years_experience": "0-2 years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": "World building (terrain, vegetation, etc.)",
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Familiarity (resemblance to tools you already know)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Free-form geometry",
            "Node-based graphs (mission/flow graphs)"
        ],
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": "Tool-based (AI enhances specific components of your manual design process)",
        "ai_importance_factors": "Maintaining creative control over the final output",
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Better integration with existing workflows"
        ],
        "most_important_problem": null
    },
    {
        "id": "112",
        "professional_role": "Technical Artist",
        "years_experience": "3-5 years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Time investment to set up compared to potential benefits",
            "Integration with existing workflows"
        ],
        "tool_view": "Existing PCG tools are too limited in what they can generate",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Integration with existing workflows",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Scene graph/hierarchical structure"
        ],
        "most_useful_approach": "Space-driven generation (spatial layout determines gameplay possibilities)",
        "ai_role_preference": "Tool-based (AI enhances specific components of your manual design process)",
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Loss of designer agency/control",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Ability to properly modify by hand the results"
    },
    {
        "id": "113",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Limited Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": "I don't currently use procedural generation",
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Unclear design methodology for procedural systems",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "I often need the time to figure out the design setup and constraints, and then there's not enough time to invest in a procedural setup",
        "critical_factors": [
            "Reliability (predictable, stable results)",
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Only web-based is less interesting than others.",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Not sure/would need to experiment",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Speed of generation compared to traditional methods"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "I think a good PCG system forces me to introspect on implicit design constraints, and thereby help me expand the design space and variety of gameplay."
    },
    {
        "id": "114",
        "professional_role": "Level Designer",
        "years_experience": "3-5 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "Moderate Experience",
            "Unreal Engine PCG tools": "Extensive Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "Moderate Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation",
            "Mission/quest generation",
            "Enemy/NPC placement"
        ],
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "PCG tools don't give me enough control over the final output",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Control over generation constraints and rules",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Runtime vs. offline generation options",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Node-based graphs (mission/flow graphs)",
            "Navigation mesh",
            "Constraint-based representations (is this a known term)",
            "Voxel-based"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Learning resources and examples for different game genres"
        ],
        "most_important_problem": "Ease of iteration and time reduced between itterations"
    },
    {
        "id": "115",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Godot",
            "Custom in-house engine",
            "CTJS, Phaser, Fliksy 2, Bitsy, Pico8, etc"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "Extensive Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "Puzzle generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Integration with existing workflows",
            "Time investment to set up compared to potential benefits",
            "Lack of precise artistic control"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Limited or no programming required",
            "Control over generation constraints and rules",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Hexagonal grid/tile-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Difficulty integrating with existing tools/workflows"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Time savings compared to manual design",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Understand my generation process of creating levels and propose a generator graph that I can edit with the AI"
    },
    {
        "id": "116",
        "professional_role": "Technical Artist",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unreal Engine",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Extensive Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "No Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance",
            "Integration with existing workflows"
        ],
        "tool_view": "There is always room for improvement.",
        "critical_factors": [
            "Simplicity (low barrier to entry)",
            "Reliability (predictable, stable results)",
            "Iteration speed"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Visual previews of generation steps",
            "Easy debugging of unexpected results",
            "Support for mission/gameplay integration",
            "Limited or no programming required",
            "Runtime vs. offline generation options",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)"
        ],
        "realtime_feedback_importance": "Very important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry"
        ],
        "most_useful_approach": "Mission-driven generation (gameplay goals determine level structure)",
        "ai_role_preference": [
            "Tool-based (AI enhances specific components of your manual design process)",
            "Full automation (AI generates complete levels with minimal input)"
        ],
        "ai_importance_factors": [
            "Speed of generation compared to traditional methods",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Improved iteration speed on level designs",
            "Reduced technical barriers to procedural generation",
            "Community/marketplace of shareable generator components"
        ],
        "most_important_problem": "Make intresting play spaces."
    },
    {
        "id": "117",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Custom in-house engine",
            "Unity",
            "Unreal Engine",
            "Godot"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": [
            "Level layout/structure generation",
            "World building (terrain, vegetation, etc.)",
            "Mission/quest generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Difficulty in debugging unexpected outputs",
            "Unpredictable results affecting game balance",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "The real benefits of PCG usually come as niche implementations, to take the full advantage customs solutions have to be made often",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Documentation and learning resources"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Easy debugging of unexpected results",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Building generators from programming primitives (maximum flexibility)",
        "integration_preference": "Standalone application that exports to game engines",
        "genre_interest": {},
        "level_representation": [
            "Node-based graphs (mission/flow graphs)",
            "Voxel-based",
            "Rectangular grid/tile-based"
        ],
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Maintaining creative control over the final output",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Loss of designer agency/control"
        ],
        "desired_solutions": [
            "Time savings compared to manual design",
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs"
        ],
        "most_important_problem": "Adaptable generators"
    },
    {
        "id": "118",
        "professional_role": "Programmer/Technical Designer",
        "years_experience": "10+ years",
        "game_engines": [
            "Unreal Engine",
            "Unity",
            "Custom in-house engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "No Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Moderate Experience"
        },
        "current_pcg_usage": "I don't currently use procedural generation",
        "level_generation_frequency": "Rarely (a few projects)",
        "primary_concerns": null,
        "tool_view": null,
        "critical_factors": null,
        "node_tool_features": [
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Runtime vs. offline generation options",
            "Ability to mix procedural and hand-crafted content",
            "Limited or no programming required",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Free-form geometry",
            "Navigation mesh"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Full automation (AI generates complete levels with minimal input)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Understanding how the AI makes its decisions",
            "Novelty/uniqueness of the generated content"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Intellectual property/ownership concerns"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Improved iteration speed on level designs",
            "Time savings compared to manual design"
        ],
        "most_important_problem": null
    },
    {
        "id": "119",
        "professional_role": "Level Designer",
        "years_experience": "10+ years",
        "game_engines": "Unreal Engine",
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Extensive Experience",
            "Blender Geometry Nodes": "No Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Often (most projects)",
        "primary_concerns": [
            "Lack of precise artistic control",
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits"
        ],
        "tool_view": "I'm satisfied with the current PCG tools available",
        "critical_factors": [
            "Documentation and learning resources",
            "Flexibility (ability to adapt to various use cases)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Visual previews of generation steps",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Ability to mix procedural and hand-crafted content",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration",
            "Limited or no programming required"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": null,
        "most_useful_approach": "Context-dependent (different approaches for different game sections)",
        "ai_role_preference": [
            "Assistant-based (AI helps implement your design intentions)",
            "I prefer traditional rule-based PCG without AI involvement"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Unpredictable or inconsistent results",
            "Lack of specialized AI tools for level design specifically"
        ],
        "desired_solutions": [
            "Community/marketplace of shareable generator components",
            "Learning resources and examples for different game genres",
            "Ability to create more content variations with consistent quality"
        ],
        "most_important_problem": "An easy solution to generate and blend well with landscapes"
    },
    {
        "id": "120",
        "professional_role": "Game Designer",
        "years_experience": "6-10 years",
        "game_engines": [
            "Unity",
            "Unreal Engine"
        ],
        "procedural_tools_experience": {
            "Houdini": "Limited Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "Moderate Experience",
            "Plugins/Tools that use Wave Function Collapse": "Limited Experience",
            "Plugins/Tools that use other methods": "Limited Experience",
            "Custom code-based PCG solutions": "Limited Experience"
        },
        "current_pcg_usage": [
            "World building (terrain, vegetation, etc.)",
            "Level layout/structure generation"
        ],
        "level_generation_frequency": "Sometimes (about half of projects)",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Time investment to set up compared to potential benefits",
            "Unpredictable results affecting game balance"
        ],
        "tool_view": "Most PCG tools are built for programmers, not designers",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Documentation and learning resources",
            "Integration with existing workflows"
        ],
        "node_tool_features": [
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Visual previews of generation steps",
            "Control over generation constraints and rules",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Runtime vs. offline generation options",
            "Support for mission/gameplay integration"
        ],
        "realtime_feedback_importance": "Somewhat important",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Plugin that works across multiple engines",
        "genre_interest": {},
        "level_representation": [
            "Rectangular grid/tile-based",
            "Scene graph/hierarchical structure",
            "Free-form geometry",
            "Node-based graphs (mission/flow graphs)",
            "Navigation mesh"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "I prefer traditional rule-based PCG without AI involvement",
            "Assistant-based (AI helps implement your design intentions)"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Maintaining creative control over the final output"
        ],
        "ai_concerns": [
            "Intellectual property/ownership concerns",
            "Potential black box nature (lack of transparency)"
        ],
        "desired_solutions": [
            "Ability to create more content variations with consistent quality",
            "Reduced technical barriers to procedural generation",
            "Community/marketplace of shareable generator components"
        ],
        "most_important_problem": null
    },
    {
        "id": "121",
        "professional_role": "Game Designer",
        "years_experience": "10+ years",
        "game_engines": "Unity",
        "procedural_tools_experience": {
            "Houdini": "No Experience",
            "Unreal Engine PCG tools": "Moderate Experience",
            "Blender Geometry Nodes": "Limited Experience",
            "Plugins/Tools that use Wave Function Collapse": "No Experience",
            "Plugins/Tools that use other methods": "Moderate Experience",
            "Custom code-based PCG solutions": "No Experience"
        },
        "current_pcg_usage": "World building (terrain, vegetation, etc.)",
        "level_generation_frequency": "Never",
        "primary_concerns": [
            "Technical complexity/steep learning curve",
            "Integration with existing workflows",
            "Unclear design methodology for procedural systems"
        ],
        "tool_view": "PCG tools are too complex to integrate into my workflow",
        "critical_factors": [
            "Flexibility (ability to adapt to various use cases)",
            "Simplicity (low barrier to entry)",
            "Feature completeness (comprehensive capabilities)"
        ],
        "node_tool_features": [
            "Control over generation constraints and rules",
            "Ability to mix procedural and hand-crafted content",
            "Pre-built common PCG patterns/techniques (WFC, graph grammars, etc.)",
            "Easy debugging of unexpected results",
            "Limited or no programming required",
            "Support for mission/gameplay integration",
            "Visual previews of generation steps",
            "Runtime vs. offline generation options"
        ],
        "realtime_feedback_importance": "Essential",
        "preferred_approach": "Assembling generators from pre-built, configurable components (balanced approach)",
        "integration_preference": "Deep integration within existing engine (like Unreal Blueprint)",
        "genre_interest": {},
        "level_representation": [
            "Scene graph/hierarchical structure",
            "Free-form geometry"
        ],
        "most_useful_approach": "Balanced approach (iterative refinement between mission and space)",
        "ai_role_preference": [
            "Suggestion-based (AI proposes level designs for you to select and modify)",
            "Tool-based (AI enhances specific components of your manual design process)"
        ],
        "ai_importance_factors": [
            "Consistency with existing game assets and style",
            "Learning from my design preferences over time"
        ],
        "ai_concerns": [
            "Potential black box nature (lack of transparency)",
            "Unpredictable or inconsistent results"
        ],
        "desired_solutions": [
            "Reduced technical barriers to procedural generation",
            "Better integration with existing workflows",
            "Time savings compared to manual design"
        ],
        "most_important_problem": "Create huge environments without doing all the manual labor (so a time (and budget) optimization)"
    }
]